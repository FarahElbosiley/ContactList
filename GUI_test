// Add these declarations in your class definition in the header file (mainwindow.h)
private:
    void saveData();
    void performCleanup();

// ...

// Add these definitions in your mainwindow.cpp file

void MainWindow::saveData()
{
    clearFile("contacts.txt");

    ofstream file("contacts.txt");
    for (const auto& contact : myContacts.BSTtoVector()) {
        file << contact.name << " " << contact.phoneNumber << " " << contact.email << " " << contact.address << endl;
    }

    file.close();
    cout << "Contacts saved to file successfully." << endl;
}

void MainWindow::performCleanup()
{
    // Add any additional cleanup operations you may need here
}

// ...

// Modify the closeEvent function to call these functions
void MainWindow::closeEvent(QCloseEvent *event)
{
    QMessageBox::StandardButton resBtn = QMessageBox::question(this, "Close Confirmation",
        tr("Do you want to save your work before exiting?"),
        QMessageBox::Cancel | QMessageBox::No | QMessageBox::Yes,
        QMessageBox::Yes);

    if (resBtn != QMessageBox::Yes) {
        event->ignore();  // Ignore the close event
    } else {
        // Save your work here.
        saveData();

        // Perform cleanup operations.
        performCleanup();

        // Accept the close event
        event->accept();
    }
}

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
class ContactBookWidget : public QWidget {
    Q_OBJECT

private:
    QListWidget* contactList;
    QLineEdit* nameLineEdit;
    QLineEdit* numberLineEdit;
    QLineEdit* emailLineEdit;
    QLineEdit* addressLineEdit;
    QPushButton* addButton;
    QPushButton* deleteButton;
    QPushButton* editButton;
    QPushButton* saveButton;
    QPushButton* searchButton;
    QLabel* editLabel;
    QString contactsFilePath;
    bool dataSaved;  // New member to track whether data is saved or not

public:
    ContactBookWidget(QWidget* parent = nullptr) : QWidget(parent), dataSaved(true) {
        // Existing constructor code...

        // New connection for the close button
        connect(this, SIGNAL(closeEvent(QCloseEvent*)), this, SLOT(closeEvent(QCloseEvent*)));
    }

protected:
    void closeEvent(QCloseEvent* event) override {
        if (!dataSaved) {
            QMessageBox::StandardButton reply;
            reply = QMessageBox::question(this, "Unsaved Changes",
                                          "There are unsaved changes. Do you want to save before closing?",
                                          QMessageBox::Yes | QMessageBox::No | QMessageBox::Cancel);

            if (reply == QMessageBox::Yes) {
                saveData();
                event->accept();  // Accept the close event after saving
            } else if (reply == QMessageBox::No) {
                event->accept();  // Accept the close event without saving
            } else {
                event->ignore();  // Ignore the close event if Cancel is chosen
            }
        } else {
            event->accept();  // Accept the close event if data is already saved
        }
    }
\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#include <QCloseEvent>

void MainWindow::closeEvent(QCloseEvent *event)
{
    QMessageBox::StandardButton resBtn = QMessageBox::question(this, "APP_NAME",
        tr("Are you sure?\\n"),
        QMessageBox::Cancel | QMessageBox::No | QMessageBox::Yes,
        QMessageBox::Yes);
    if (resBtn != QMessageBox::Yes) {
        event->ignore();
    } else {
        event->accept();
    }
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

QPushButton *yourButton = new QPushButton(this);
connect(yourButton, &QPushButton::clicked, this, &QWidget::close);





\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

#include <QCloseEvent>
#include <QMessageBox>
#include <fstream>

void MainWindow::closeEvent(QCloseEvent *event)
{
    QMessageBox::StandardButton resBtn = QMessageBox::question(this, "Close Confirmation",
        tr("Do you want to save your work before exiting?"),
        QMessageBox::Cancel | QMessageBox::No | QMessageBox::Yes,
        QMessageBox::Yes);
    if (resBtn != QMessageBox::Yes) {
        event->ignore();
    } else {
        // Save your work here.
        clearFile("contacts.txt");
        ofstream file("contacts.txt");
        for (const auto& contact : myContacts.BSTtoVector()) {
            file << contact.name << " " << contact.phoneNumber << " " << contact.email << contact.address << endl;
        }

        file.close();
        cout << "Contacts saved to file successfully." << endl;

        event->accept();
    }
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
                                        NEW UPDATE 
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#include <QApplication>
#include <QWidget>
#include <QTextEdit>
#include <QVBoxLayout>
#include <QPushButton>
#include <QMessageBox>
#include <QFile>
#include <QTextStream>

class MyMainWindow : public QWidget {
    Q_OBJECT

public:
    MyMainWindow(QWidget *parent = nullptr) : QWidget(parent) {
        setupUI();
        loadDataFromFile();
    }

protected:
    void closeEvent(QCloseEvent *event) override {
        if (isDataModified()) {
            int answer = QMessageBox::question(this, "Unsaved Changes",
                                               "There are unsaved changes. Do you want to save before closing?",
                                               QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);

            if (answer == QMessageBox::Save) {
                saveDataToFile();
            } else if (answer == QMessageBox::Cancel) {
                event->ignore();  // Ignore the close event
                return;
            }
        }

        event->accept();  // Allow the close event
    }

private slots:
    void saveAndClearData() {
        saveDataToFile();
        textEdit->clear();
    }

private:
    void setupUI() {
        QVBoxLayout *layout = new QVBoxLayout(this);

        textEdit = new QTextEdit(this);
        layout->addWidget(textEdit);

        QPushButton *saveAndClearButton = new QPushButton("Save and Clear", this);
        connect(saveAndClearButton, &QPushButton::clicked, this, &MyMainWindow::saveAndClearData);
        layout->addWidget(saveAndClearButton);

        setLayout(layout);
        setWindowTitle("Qt Creator GUI");
    }

    void loadDataFromFile() {
        QFile file("data.txt");
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            QString data = in.readAll();
            file.close();
            textEdit->setPlainText(data);
            originalData = data;
        }
    }

    void saveDataToFile() {
        QFile file("data.txt");
        if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream out(&file);
            out << textEdit->toPlainText();
            file.close();
            originalData = textEdit->toPlainText();
        }
    }

    bool isDataModified() const {
        return textEdit->toPlainText() != originalData;
    }

    QTextEdit *textEdit;
    QString originalData;
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);

    MyMainWindow mainWindow;
    mainWindow.show();

    return app.exec();
}

#include "main.moc"
